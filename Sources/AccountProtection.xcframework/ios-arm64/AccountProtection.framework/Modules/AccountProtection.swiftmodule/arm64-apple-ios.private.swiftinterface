// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AccountProtection
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
@_exported import AccountProtection
import SystemConfiguration.CaptiveNetwork
import Combine
import CoreMotion
import CoreTelephony
import Darwin
import ExternalAccessory
import Foundation
import MachO
import Swift
import SwiftUI
import SystemConfiguration
import TSCoreSDK
import UIKit
import _Concurrency
import _StringProcessing
import zlib
public struct TSTriggerActionResponse {
  public let token: Swift.String
}
public struct TSTriggerActionError : Swift.Error {
}
public struct TSActionEventOptions {
  public init(correlationId: Swift.String?, claimUserId: Swift.String?, referenceUserId: Swift.String?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TSAccountProtection : ObjectiveC.NSObject {
  public static func initialize(baseUrl: Swift.String = "https://collect.riskid.security/device/", clientId: Swift.String, userId: Swift.String? = nil)
  public static func triggerAction(_ action: Swift.String, options: AccountProtection.TSActionEventOptions? = nil, completion: @escaping (Swift.Result<AccountProtection.TransmitSecurityTriggerActionResponse, AccountProtection.TransmitSecurityAccountProtectionError>) -> Swift.Void)
  public static func setUserId(_ userId: Swift.String)
  public static func clearUser()
  @objc deinit
}
public enum TSProtectionError : Swift.Error {
  case Disabled
  case InternalError
  case ConnectionError
  case NotSupportedActionError
  public static func == (a: AccountProtection.TSProtectionError, b: AccountProtection.TSProtectionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum TransmitSecurityAccountProtectionError : Swift.Error {
  case disabled
  case internalError
  case connectionError
  case notSupportedActionError
  public static func == (a: AccountProtection.TransmitSecurityAccountProtectionError, b: AccountProtection.TransmitSecurityAccountProtectionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TransmitSecurityTriggerActionResponse : Swift.Codable {
  public let actionToken: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension AccountProtection.TSProtectionError : Swift.Equatable {}
extension AccountProtection.TSProtectionError : Swift.Hashable {}
extension AccountProtection.TransmitSecurityAccountProtectionError : Swift.Equatable {}
extension AccountProtection.TransmitSecurityAccountProtectionError : Swift.Hashable {}
